import requests
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup
import time
import random


class VulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self.visited_links = set()
        self.links_to_ignore = []
        self.vulnerabilities = []
        self.timeout = 10
        self.max_links = 50  # Limit to prevent excessive scanning
        self.rate_limit_delay = 1  # seconds between requests

    def is_valid_url(self, url):
        """Check if URL is valid and belongs to the target domain."""
        parsed = urlparse(url)
        return parsed.netloc == urlparse(self.target_url).netloc

    def scan(self):
        """Main scanning method that coordinates all tests."""
        print(f"\n[+] Starting scan for {self.target_url}")
        start_time = time.time()

        try:
            # First check if the target is reachable
            if not self.check_site_availability():
                print("[-] Target is not responding")
                return

            # Crawl the site to find all pages first
            self.crawl_site(self.target_url)

            # Perform vulnerability tests
            self.test_xss()
            self.test_sql_injection()
            self.check_directory_listing()
            self.check_exposed_config_files()
            self.check_server_info_disclosure()

            # Print summary
            self.print_summary()

        except requests.exceptions.RequestException as e:
            print(f"[-] Error during scanning: {e}")
        except Exception as e:
            print(f"[-] Unexpected error: {e}")

        elapsed_time = time.time() - start_time
        print(f"\n[+] Scan completed in {elapsed_time:.2f} seconds")

    def check_site_availability(self):
        """Check if the target website is available."""
        try:
            response = self.session.get(self.target_url, timeout=self.timeout)
            return response.status_code == 200
        except:
            return False

    def crawl_site(self, url):
        """Crawl the website to discover all links."""
        if len(self.visited_links) >= self.max_links:
            return

        if url in self.visited_links or not self.is_valid_url(url):
            return

        self.visited_links.add(url)
        print(f"[*] Crawling: {url}")

        try:
            time.sleep(self.rate_limit_delay)  # Be polite with requests
            response = self.session.get(url, timeout=self.timeout)
            soup = BeautifulSoup(response.text, 'html.parser')

            # Find all links on the page
            for link in soup.find_all('a', href=True):
                absolute_url = urljoin(url, link['href'])
                if self.is_valid_url(absolute_url):
                    self.crawl_site(absolute_url)

        except Exception as e:
            print(f"[-] Error crawling {url}: {e}")

    def extract_forms(self, url):
        """Extract all forms from a given URL."""
        try:
            response = self.session.get(url, timeout=self.timeout)
            soup = BeautifulSoup(response.content, 'html.parser')
            return soup.find_all("form")
        except:
            return []

    def test_xss(self):
        """Test for Cross-Site Scripting vulnerabilities."""
        print("\n[+] Testing for XSS vulnerabilities")

        js_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "\"><script>alert('XSS')</script>",
            "javascript:alert('XSS')"
        ]

        for url in self.visited_links:
            forms = self.extract_forms(url)
            if not forms:
                continue

            print(f"[*] Found {len(forms)} forms on {url}")

            for form in forms:
                for payload in js_payloads:
                    action = form.get("action")
                    method = form.get("method", "get").lower()
                    form_url = urljoin(url, action)

                    inputs = form.find_all("input")
                    data = {}
                    for input in inputs:
                        name = input.get("name")
                        input_type = input.get("type")
                        value = input.get("value", payload)
                        if name and input_type != "submit":
                            data[name] = value

                    try:
                        if method == "post":
                            response = self.session.post(form_url, data=data, timeout=self.timeout)
                        else:
                            response = self.session.get(form_url, params=data, timeout=self.timeout)

                        if payload in response.text:
                            vuln = {
                                'type': 'XSS',
                                'url': form_url,
                                'form': str(form),
                                'payload': payload
                            }
                            self.vulnerabilities.append(vuln)
                            print(f"[!] XSS Vulnerability found in {form_url}")
                            break  # No need to test other payloads for this form

                    except Exception as e:
                        print(f"[-] Error testing XSS on {form_url}: {e}")

    def test_sql_injection(self):
        """Test for SQL Injection vulnerabilities."""
        print("\n[+] Testing for SQL Injection vulnerabilities")

        sql_payloads = [
            "'",
            "\"",
            "' OR '1'='1",
            "' OR 1=1--",
            "\" OR \"\"=\"",
            "admin'--",
            "1' ORDER BY 1--",
            "1' UNION SELECT null, version()--"
        ]

        sql_errors = [
            "mysql_fetch_array()",
            "mysql_fetch_assoc()",
            "mysql_num_rows()",
            "syntax error",
            "sql syntax",
            "unclosed quotation mark",
            "sql server",
            "odbc driver",
            "ora-",
            "postgresql",
            "jdbc"
        ]

        for url in self.visited_links:
            forms = self.extract_forms(url)
            if not forms:
                continue

            for form in forms:
                for payload in sql_payloads:
                    action = form.get("action")
                    method = form.get("method", "get").lower()
                    form_url = urljoin(url, action)

                    inputs = form.find_all("input")
                    data = {}
                    for input in inputs:
                        name = input.get("name")
                        input_type = input.get("type")
                        value = input.get("value", payload)
                        if name and input_type != "submit":
                            data[name] = value

                    try:
                        if method == "post":
                            response = self.session.post(form_url, data=data, timeout=self.timeout)
                        else:
                            response = self.session.get(form_url, params=data, timeout=self.timeout)

                        response_text = response.text.lower()
                        for error in sql_errors:
                            if error in response_text:
                                vuln = {
                                    'type': 'SQL Injection',
                                    'url': form_url,
                                    'form': str(form),
                                    'payload': payload,
                                    'error': error
                                }
                                self.vulnerabilities.append(vuln)
                                print(f"[!] Possible SQLi in {form_url}")
                                break  # No need to check other errors for this payload

                    except Exception as e:
                        print(f"[-] Error testing SQLi on {form_url}: {e}")

    def check_directory_listing(self):
        """Checking for enabled directory listing."""
        print("\n[+] Checking for directory listing vulnerabilities")

        common_dirs = [
            "admin/", "backup/", "logs/", "config/", "uploads/",
            "includes/", "tmp/", "assets/", "images/", "doc/"
        ]

        for directory in common_dirs:
            url = urljoin(self.target_url, directory)
            try:
                response = self.session.get(url, timeout=self.timeout)
                if response.status_code == 200:
                    if "Index of /" in response.text or "Directory listing for /" in response.text:
                        vuln = {
                            'type': 'Directory Listing',
                            'url': url,
                            'info': 'Directory listing is enabled'
                        }
                        self.vulnerabilities.append(vuln)
                        print(f"[!] Directory listing enabled at {url}")

            except Exception as e:
                print(f"[-] Error checking directory {url}: {e}")

    def check_exposed_config_files(self):
        """Check for exposed configuration files."""
        print("\n[+] Checking for exposed config files")

        config_files = [
            ".env", "config.php", "configuration.ini", "web.config",
            "config.json", "settings.py", ".htaccess", ".htpasswd"
        ]

        for config_file in config_files:
            url = urljoin(self.target_url, config_file)
            try:
                response = self.session.get(url, timeout=self.timeout)
                if response.status_code == 200:
                    # Check if the response looks like a config file
                    if any(keyword in response.text.lower() for keyword in ["password", "database", "secret", "key"]):
                        vuln = {
                            'type': 'Exposed Config File',
                            'url': url,
                            'info': 'Sensitive configuration file is exposed'
                        }
                        self.vulnerabilities.append(vuln)
                        print(f"[!] Exposed config file found at {url}")

            except Exception as e:
                print(f"[-] Error checking config file {url}: {e}")

    def check_server_info_disclosure(self):
        """Check for server information disclosure."""
        print("\n[+] Checking for server information disclosure")

        try:
            response = self.session.get(self.target_url, timeout=self.timeout)
            headers = response.headers

            # Check for sensitive headers
            sensitive_headers = ["server", "x-powered-by", "x-aspnet-version"]
            for header in sensitive_headers:
                if header in headers:
                    vuln = {
                        'type': 'Information Disclosure',
                        'url': self.target_url,
                        'info': f'Sensitive header {header} exposed with value: {headers[header]}'
                    }
                    self.vulnerabilities.append(vuln)
                    print(f"[!] Server information disclosed in {header} header: {headers[header]}")

            # Check response for framework info
            framework_keywords = {
                "wordpress": "WordPress",
                "drupal": "Drupal",
                "joomla": "Joomla",
                "laravel": "Laravel",
                "django": "Django"
            }

            response_text = response.text.lower()
            for key, value in framework_keywords.items():
                if key in response_text:
                    vuln = {
                        'type': 'Information Disclosure',
                        'url': self.target_url,
                        'info': f'Web framework {value} detected'
                    }
                    self.vulnerabilities.append(vuln)
                    print(f"[!] Web framework detected: {value}")

        except Exception as e:
            print(f"[-] Error checking server info: {e}")

    def print_summary(self):
        """Print a summary of found vulnerabilities."""
        print("\n[+] Scan Summary:")
        print(f"Total pages scanned: {len(self.visited_links)}")
        print(f"Total vulnerabilities found: {len(self.vulnerabilities)}")

        if self.vulnerabilities:
            print("\nVulnerabilities found:")
            for i, vuln in enumerate(self.vulnerabilities, 1):
                print(f"\n{i}. Type: {vuln['type']}")
                print(f"   URL: {vuln['url']}")
                if 'payload' in vuln:
                    print(f"   Payload: {vuln['payload']}")
                if 'error' in vuln:
                    print(f"   Error detected: {vuln['error']}")
                if 'info' in vuln:
                    print(f"   Info: {vuln['info']}")
        else:
            print("No vulnerabilities found.")


if __name__ == "__main__":
    target_url = input("Enter target URL (include http:// or https://): ").strip()
    if not target_url.startswith(('http://', 'https://')):
        target_url = 'http://' + target_url

    scanner = VulnerabilityScanner(target_url)
    scanner.scan()
